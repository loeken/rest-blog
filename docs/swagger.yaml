basePath: /api/v1
definitions:
  models.User:
    properties:
      email:
        type: string
      nickname:
        type: string
      password:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: loeken@internetz.me
    name: loeken
  description: This is a sample service for a blog
  license:
    name: Apache 2.0
  termsOfService: loekenIsKing
  title: Rest Blog
  version: "1.0"
paths:
  /user:
    get:
      consumes:
      - application/json
      description: lists all users
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
      summary: lists all users
    post:
      consumes:
      - application/json
      description: Creates a new User account
      parameters:
      - description: Json body containing user credentials
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
      summary: Creates a new User account
  /user/{id}:
    delete:
      consumes:
      - application/json
      description: delete specific user by id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: 'Format: ''Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJleHAiOjE2MDQ1MzExMDIsInVzZXJfaWQiOjF9.O63ZS_Poy29dDdcZqHDN0XeMPbYPX-Vfyl_FPfsMTvQ'''
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      security:
      - ApiKeyAuth: []
      summary: delete specific user by id
    get:
      consumes:
      - application/json
      description: list specific user by id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
      summary: list specific user by id
    put:
      consumes:
      - application/json
      description: update specific user by id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Json body containing user credentials
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.User'
      - description: 'Format: ''Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJleHAiOjE2MDQ1MzExMDIsInVzZXJfaWQiOjF9.O63ZS_Poy29dDdcZqHDN0XeMPbYPX-Vfyl_FPfsMTvQ'''
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      security:
      - ApiKeyAuth: []
      summary: update specific user by id
  /user/login:
    post:
      consumes:
      - application/json
      description: Allows login to the application by generating a JWT
      parameters:
      - description: Login
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: Token
          schema:
            type: string
      summary: Login to the application, generates a JWT
schemes:
- http
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
